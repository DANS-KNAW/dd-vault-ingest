{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"dd-vault-ingest \u00b6 Service that processes DANS bag deposits converting them to RDA compliant BagPacks and sends them to the DANS Data Vault. Purpose \u00b6 This service is part of the Vault as a Service pipeline. It is responsible for: Validating incoming DANS deposits Converting DANS deposits to RDA compliant BagPacks Handing the BagPacks over to Transfer Service for ingestion into the DANS Data Vault Interfaces \u00b6 This service has the following interfaces: Provided interfaces \u00b6 Inbox \u00b6 Protocol type : Shared filesystem Internal or external : internal Purpose : to receive DANS bag deposits from the SWORDv2 deposit service Admin console \u00b6 Protocol type : HTTP Internal or external : internal Purpose : application monitoring and management Consumed interfaces \u00b6 Vault Catalog \u00b6 Protocol type : HTTP Internal or external : internal Purpose : register skeleton dataset version records for incoming deposits Validate DANS Bag \u00b6 Protocol type : HTTP Internal or external : internal Purpose : validate incoming DANS bag deposits Processing \u00b6 The service continuously monitors its inbox for new DANS bag deposits. When a new deposit arrives, the service performs the following steps: Validate the DANS bag using the Validate DANS Bag service. If the bag is valid, create a skeleton dataset version record in the Vault Catalog. Convert the DANS bag to an RDA compliant BagPack. Hand over the BagPack to the Transfer Service for ingestion into the DANS Data Vault.","title":"Description"},{"location":"#dd-vault-ingest","text":"Service that processes DANS bag deposits converting them to RDA compliant BagPacks and sends them to the DANS Data Vault.","title":"dd-vault-ingest"},{"location":"#purpose","text":"This service is part of the Vault as a Service pipeline. It is responsible for: Validating incoming DANS deposits Converting DANS deposits to RDA compliant BagPacks Handing the BagPacks over to Transfer Service for ingestion into the DANS Data Vault","title":"Purpose"},{"location":"#interfaces","text":"This service has the following interfaces:","title":"Interfaces"},{"location":"#provided-interfaces","text":"","title":"Provided interfaces"},{"location":"#inbox","text":"Protocol type : Shared filesystem Internal or external : internal Purpose : to receive DANS bag deposits from the SWORDv2 deposit service","title":"Inbox"},{"location":"#admin-console","text":"Protocol type : HTTP Internal or external : internal Purpose : application monitoring and management","title":"Admin console"},{"location":"#consumed-interfaces","text":"","title":"Consumed interfaces"},{"location":"#vault-catalog","text":"Protocol type : HTTP Internal or external : internal Purpose : register skeleton dataset version records for incoming deposits","title":"Vault Catalog"},{"location":"#validate-dans-bag","text":"Protocol type : HTTP Internal or external : internal Purpose : validate incoming DANS bag deposits","title":"Validate DANS Bag"},{"location":"#processing","text":"The service continuously monitors its inbox for new DANS bag deposits. When a new deposit arrives, the service performs the following steps: Validate the DANS bag using the Validate DANS Bag service. If the bag is valid, create a skeleton dataset version record in the Vault Catalog. Convert the DANS bag to an RDA compliant BagPack. Hand over the BagPack to the Transfer Service for ingestion into the DANS Data Vault.","title":"Processing"},{"location":"config/","text":"Configuration \u00b6 This module can be configured by editing the configuration file. This file is installed in /etc/opt/dans.knaw.nl/dd-vault-ingest/config.yml when using the RPM. The settings are explained with comments in the file itself. An on-line version of the latest configuration file can be found here .","title":"Configuration"},{"location":"config/#configuration","text":"This module can be configured by editing the configuration file. This file is installed in /etc/opt/dans.knaw.nl/dd-vault-ingest/config.yml when using the RPM. The settings are explained with comments in the file itself. An on-line version of the latest configuration file can be found here .","title":"Configuration"},{"location":"context/","text":"Context \u00b6 This module is a component in the DANS Data Station Architecture .","title":"Context"},{"location":"context/#context","text":"This module is a component in the DANS Data Station Architecture .","title":"Context"},{"location":"dev-debugging/","text":"Local debugging \u00b6 To locally debug you need to have the following services running: dd-validate-dans-bag . Note that its validation.baseFolder configuration property should point to the inbox or an ancestor of it. dd-vault-catalog . You could run this in local debug mode as well, but the HQSLDB is very limited, so it is better to use the catalog installed on the development Vagrant box.","title":"Local debugging"},{"location":"dev-debugging/#local-debugging","text":"To locally debug you need to have the following services running: dd-validate-dans-bag . Note that its validation.baseFolder configuration property should point to the inbox or an ancestor of it. dd-vault-catalog . You could run this in local debug mode as well, but the HQSLDB is very limited, so it is better to use the catalog installed on the development Vagrant box.","title":"Local debugging"},{"location":"dev/","text":"Development \u00b6 General information about developing DANS modules can be found here .","title":"Overview"},{"location":"dev/#development","text":"General information about developing DANS modules can be found here .","title":"Development"},{"location":"installation/","text":"Installation \u00b6 Currently, this project is built as an RPM package for RHEL8 and later. The RPM will install the binaries to /opt/dans.knaw.nl/dd-vault-ingest and the configuration files to /etc/opt/dans.knaw.nl/dd-vault-ingest . For installation on systems that do no support RPM and/or systemd: Build the tarball (see next section). Extract it to some location on your system, for example /opt/dans.knaw.nl/dd-vault-ingest . Start the service with the following command /opt/dans.knaw.nl/dd-vault-ingest/bin/dd-vault-ingest server /opt/dans.knaw.nl/dd-vault-ingest/cfg/config.yml Building from source \u00b6 Prerequisites: Java 17 or higher Maven 3.3.3 or higher RPM (optional, only if you want to build the RPM package) Steps: git clone https://github.com/DANS-KNAW/dd-vault-ingest.git cd dd-vault-ingest mvn clean install If the rpm executable is found at /usr/local/bin/rpm , the build profile that includes the RPM packaging will be activated. If rpm is available, but at a different path, then activate it by using Maven's -P switch: mvn -Pprm install . Alternatively, to build the tarball execute: mvn clean install assembly:single","title":"Installation"},{"location":"installation/#installation","text":"Currently, this project is built as an RPM package for RHEL8 and later. The RPM will install the binaries to /opt/dans.knaw.nl/dd-vault-ingest and the configuration files to /etc/opt/dans.knaw.nl/dd-vault-ingest . For installation on systems that do no support RPM and/or systemd: Build the tarball (see next section). Extract it to some location on your system, for example /opt/dans.knaw.nl/dd-vault-ingest . Start the service with the following command /opt/dans.knaw.nl/dd-vault-ingest/bin/dd-vault-ingest server /opt/dans.knaw.nl/dd-vault-ingest/cfg/config.yml","title":"Installation"},{"location":"installation/#building-from-source","text":"Prerequisites: Java 17 or higher Maven 3.3.3 or higher RPM (optional, only if you want to build the RPM package) Steps: git clone https://github.com/DANS-KNAW/dd-vault-ingest.git cd dd-vault-ingest mvn clean install If the rpm executable is found at /usr/local/bin/rpm , the build profile that includes the RPM packaging will be activated. If rpm is available, but at a different path, then activate it by using Maven's -P switch: mvn -Pprm install . Alternatively, to build the tarball execute: mvn clean install assembly:single","title":"Building from source"}]}